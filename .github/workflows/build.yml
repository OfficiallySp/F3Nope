# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: Build F3Nope for All Major Minecraft Versions

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest
    name: "Build MC ${{ matrix.minecraft.version }}"
    strategy:
      fail-fast: false
      matrix:
        minecraft: [
          # Minecraft 1.20.x (Trails & Tales)
          {
            version: "1.20.2",
            yarn: "1.20.2+build.4",
            loader: "0.16.14",
            fabric: "0.91.6+1.20.2",
            java: "17",
            loom: "1.10-SNAPSHOT"
          },
          {
            version: "1.20.4",
            yarn: "1.20.4+build.3",
            loader: "0.16.14",
            fabric: "0.97.2+1.20.4",
            java: "17",
            loom: "1.10-SNAPSHOT"
          },
          {
            version: "1.20.6",
            yarn: "1.20.6+build.3",
            loader: "0.16.14",
            fabric: "0.100.8+1.20.6",
            java: "21",
            loom: "1.10-SNAPSHOT"
          },
          # Minecraft 1.21.x (Tricky Trials)
          {
            version: "1.21.1",
            yarn: "1.21.1+build.3",
            loader: "0.16.14",
            fabric: "0.116.1+1.21.1",
            java: "21",
            loom: "1.10-SNAPSHOT"
          },
          {
            version: "1.21.3",
            yarn: "1.21.3+build.2",
            loader: "0.16.14",
            fabric: "0.114.1+1.21.3",
            java: "21",
            loom: "1.10-SNAPSHOT"
          },
          {
            version: "1.21.4",
            yarn: "1.21.4+build.8",
            loader: "0.16.14",
            fabric: "0.119.3+1.21.4",
            java: "21",
            loom: "1.10-SNAPSHOT"
          },
          {
            version: "1.21.5",
            yarn: "1.21.5+build.1",
            loader: "0.16.14",
            fabric: "0.126.0+1.21.5",
            java: "21",
            loom: "1.10-SNAPSHOT"
          },
          {
            version: "1.21.6",
            yarn: "1.21.6+build.1",
            loader: "0.16.14",
            fabric: "0.128.0+1.21.6",
            java: "21",
            loom: "1.10-SNAPSHOT"
          }
        ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v4

    - name: Set up JDK ${{ matrix.minecraft.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.minecraft.java }}
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Create version-specific files
      run: |
        # Create backup of original files
        cp gradle.properties gradle.properties.backup
        cp src/main/resources/fabric.mod.json src/main/resources/fabric.mod.json.backup
        cp build.gradle build.gradle.backup
        cp src/main/resources/f3nope.mixins.json src/main/resources/f3nope.mixins.json.backup
        cp src/client/resources/f3nope.client.mixins.json src/client/resources/f3nope.client.mixins.json.backup

    - name: Update gradle.properties for MC ${{ matrix.minecraft.version }}
      run: |
        sed -i "s/minecraft_version=.*/minecraft_version=${{ matrix.minecraft.version }}/" gradle.properties
        sed -i "s/yarn_mappings=.*/yarn_mappings=${{ matrix.minecraft.yarn }}/" gradle.properties
        sed -i "s/loader_version=.*/loader_version=${{ matrix.minecraft.loader }}/" gradle.properties
        sed -i "s/fabric_version=.*/fabric_version=${{ matrix.minecraft.fabric }}/" gradle.properties

    - name: Update fabric.mod.json for MC ${{ matrix.minecraft.version }}
      run: |
        sed -i "s/\"minecraft\": \"~.*\"/\"minecraft\": \"~${{ matrix.minecraft.version }}\"/" src/main/resources/fabric.mod.json
        sed -i "s/\"fabricloader\": \">.*\"/\"fabricloader\": \">=${{ matrix.minecraft.loader }}\"/" src/main/resources/fabric.mod.json
        sed -i "s/\"java\": \">=.*\"/\"java\": \">=${{ matrix.minecraft.java }}\"/" src/main/resources/fabric.mod.json

    - name: Update build.gradle for Java ${{ matrix.minecraft.java }}
      run: |
        sed -i "s/it.options.release = .*/it.options.release = ${{ matrix.minecraft.java }}/" build.gradle
        sed -i "s/JavaVersion.VERSION_.*/JavaVersion.VERSION_${{ matrix.minecraft.java }}/" build.gradle
        # Update Fabric Loom version for older MC versions
        if [[ "${{ matrix.minecraft.version }}" =~ ^1\.(14|15|16) ]]; then
          sed -i "s/id 'fabric-loom' version '.*'/id 'fabric-loom' version '${{ matrix.minecraft.loom }}'/" build.gradle
        fi

    - name: Update mixin compatibility for Java ${{ matrix.minecraft.java }}
      run: |
        sed -i "s/\"compatibilityLevel\": \"JAVA_.*\"/\"compatibilityLevel\": \"JAVA_${{ matrix.minecraft.java }}\"/" src/main/resources/f3nope.mixins.json
        sed -i "s/\"compatibilityLevel\": \"JAVA_.*\"/\"compatibilityLevel\": \"JAVA_${{ matrix.minecraft.java }}\"/" src/client/resources/f3nope.client.mixins.json

    - name: Handle version-specific code changes
      run: |
        # For very old versions (1.14-1.16), we might need to adjust some imports
        if [[ "${{ matrix.minecraft.version }}" =~ ^1\.(14|15|16) ]]; then
          echo "Applying compatibility patches for older Minecraft versions..."
          # Add any version-specific patches here if needed
        fi

        # For 1.21+ versions with Identifier changes
        if [[ "${{ matrix.minecraft.version }}" =~ ^1\.21\. ]]; then
          echo "Applying 1.21+ compatibility patches..."
          # Handle new Identifier() -> Identifier.of() changes if needed
        fi

    - name: Clean previous build
      run: ./gradlew clean

    - name: Build mod
      run: ./gradlew build
      env:
        # Increase memory for older Gradle versions
        GRADLE_OPTS: "-Xmx2G -Dorg.gradle.daemon=false"

    - name: Prepare release artifacts
      run: |
        mkdir -p build/release

        # Extract mod version with better error handling
        MOD_VERSION=$(grep "mod_version=" gradle.properties | cut -d'=' -f2 | tr -d ' \t\r\n')

        if [[ -z "$MOD_VERSION" ]]; then
          echo "ERROR: Could not extract mod_version from gradle.properties"
          echo "gradle.properties content:"
          cat gradle.properties
          exit 1
        fi

        echo "Extracted MOD_VERSION: '$MOD_VERSION'"

        # Debug: List all files in build directory
        echo "=== Build directory contents ==="
        find build -name "*.jar" -type f 2>/dev/null || echo "No JAR files found in build directory"
        echo "=== build/libs contents ==="
        ls -la build/libs/ 2>/dev/null || echo "build/libs directory doesn't exist"

        # Find the correct JAR file
        JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-sources.jar" -not -name "*-dev.jar" | head -1)

        if [[ -z "$JAR_FILE" ]]; then
          echo "ERROR: No JAR file found in build/libs/"
          echo "Contents of build directory:"
          find build -type f -name "*.jar" || echo "No JAR files found anywhere in build/"
          exit 1
        fi

        echo "Found JAR file: $JAR_FILE"

        # Create release JAR name and verify it
        RELEASE_JAR="f3nope-${{ matrix.minecraft.version }}-${MOD_VERSION}.jar"
        echo "Creating release JAR: '$RELEASE_JAR'"

        # Copy the file
        cp "$JAR_FILE" "build/release/${RELEASE_JAR}"

        # Verify the file was created
        if [[ ! -f "build/release/${RELEASE_JAR}" ]]; then
          echo "ERROR: Failed to create release JAR file"
          exit 1
        fi

        # Export variables for subsequent steps
        {
          echo "MOD_VERSION=${MOD_VERSION}"
          echo "RELEASE_JAR=${RELEASE_JAR}"
        } >> $GITHUB_ENV

        # Also save to files as backup method
        echo "${MOD_VERSION}" > build/release/mod_version.txt
        echo "${RELEASE_JAR}" > build/release/release_jar_name.txt

        # Create a summary file for this version
        echo "# F3Nope for Minecraft ${{ matrix.minecraft.version }}" > "build/release/f3nope-${{ matrix.minecraft.version }}-info.txt"
        echo "Minecraft: ${{ matrix.minecraft.version }}" >> "build/release/f3nope-${{ matrix.minecraft.version }}-info.txt"
        echo "Fabric Loader: ${{ matrix.minecraft.loader }}" >> "build/release/f3nope-${{ matrix.minecraft.version }}-info.txt"
        echo "Yarn Mappings: ${{ matrix.minecraft.yarn }}" >> "build/release/f3nope-${{ matrix.minecraft.version }}-info.txt"
        echo "Fabric API: ${{ matrix.minecraft.fabric }}" >> "build/release/f3nope-${{ matrix.minecraft.version }}-info.txt"
        echo "Java: ${{ matrix.minecraft.java }}" >> "build/release/f3nope-${{ matrix.minecraft.version }}-info.txt"

        echo "=== Final release artifacts ==="
        ls -la build/release/
        echo "Release JAR name: ${RELEASE_JAR}"

        # Debug: Show what we're exporting
        echo "Exported MOD_VERSION: ${MOD_VERSION}"
        echo "Exported RELEASE_JAR: ${RELEASE_JAR}"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: f3nope-${{ matrix.minecraft.version }}
        path: build/release/*
        retention-days: 30

    - name: Debug environment variables (if release event)
      if: github.event_name == 'release'
      run: |
        echo "=== Environment Variables Debug ==="
        echo "MOD_VERSION from env: '${{ env.MOD_VERSION }}'"
        echo "RELEASE_JAR from env: '${{ env.RELEASE_JAR }}'"

        echo "=== Reading from backup files ==="
        if [[ -f "build/release/mod_version.txt" ]]; then
          MOD_VERSION_FILE=$(cat build/release/mod_version.txt)
          echo "MOD_VERSION from file: '$MOD_VERSION_FILE'"
        fi

        if [[ -f "build/release/release_jar_name.txt" ]]; then
          RELEASE_JAR_FILE=$(cat build/release/release_jar_name.txt)
          echo "RELEASE_JAR from file: '$RELEASE_JAR_FILE'"
        fi

        echo "=== All files in build/release/ ==="
        ls -la build/release/ || echo "build/release/ directory doesn't exist"

        echo "=== Testing file path resolution ==="
        echo "Expected file path (env): 'build/release/${{ env.RELEASE_JAR }}'"
        if [[ -f "build/release/release_jar_name.txt" ]]; then
          RELEASE_JAR_FILE=$(cat build/release/release_jar_name.txt)
          echo "Expected file path (file): 'build/release/${RELEASE_JAR_FILE}'"

          if [[ -f "build/release/${RELEASE_JAR_FILE}" ]]; then
            echo "✓ Release JAR file exists (using file method)"
            ls -la "build/release/${RELEASE_JAR_FILE}"
          else
            echo "✗ Release JAR file does not exist (using file method)"
          fi
        fi

    - name: Upload to release (if release event)
      if: github.event_name == 'release'
      run: |
        # Recreate the variables in this step to ensure they're available
        MOD_VERSION=$(grep "mod_version=" gradle.properties | cut -d'=' -f2 | tr -d ' \t\r\n')
        RELEASE_JAR="f3nope-${{ matrix.minecraft.version }}-${MOD_VERSION}.jar"

        echo "=== Upload Step Debug ==="
        echo "MOD_VERSION: '$MOD_VERSION'"
        echo "RELEASE_JAR: '$RELEASE_JAR'"
        echo "File path: 'build/release/${RELEASE_JAR}'"

        # Verify the file exists
        if [[ ! -f "build/release/${RELEASE_JAR}" ]]; then
          echo "ERROR: Release JAR file not found!"
          echo "Contents of build/release/:"
          ls -la build/release/
          exit 1
        fi

        echo "✓ Release JAR file found, proceeding with upload..."

        # Use the GitHub CLI to upload the release asset
        gh release upload ${{ github.event.release.tag_name }} "build/release/${RELEASE_JAR}" --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Restore original files
      if: always()
      run: |
        mv gradle.properties.backup gradle.properties || true
        mv src/main/resources/fabric.mod.json.backup src/main/resources/fabric.mod.json || true
        mv build.gradle.backup build.gradle || true
        mv src/main/resources/f3nope.mixins.json.backup src/main/resources/f3nope.mixins.json || true
        mv src/client/resources/f3nope.client.mixins.json.backup src/client/resources/f3nope.client.mixins.json || true

  # Summary job that creates a combined release with all versions
  create-release-summary:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create release summary
      run: |
        echo "# F3Nope Multi-Version Release" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "This release includes F3Nope for the following Minecraft versions:" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md

        # List all built versions
        for dir in ./artifacts/*/; do
          if [[ -f "$dir"*-info.txt ]]; then
            version=$(basename "$dir" | sed 's/f3nope-//')
            echo "- **Minecraft $version**" >> RELEASE_NOTES.md
            cat "$dir"*-info.txt | grep -v "^#" | sed 's/^/  - /' >> RELEASE_NOTES.md
            echo "" >> RELEASE_NOTES.md
          fi
        done

        echo "## Installation" >> RELEASE_NOTES.md
        echo "1. Download the version matching your Minecraft installation" >> RELEASE_NOTES.md
        echo "2. Install the corresponding Fabric Loader version" >> RELEASE_NOTES.md
        echo "3. Download the matching Fabric API" >> RELEASE_NOTES.md
        echo "4. Place both JARs in your mods folder" >> RELEASE_NOTES.md

        cat RELEASE_NOTES.md

    - name: Update release description
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const releaseNotes = fs.readFileSync('RELEASE_NOTES.md', 'utf8');

          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: context.payload.release.id,
            body: releaseNotes
          });
